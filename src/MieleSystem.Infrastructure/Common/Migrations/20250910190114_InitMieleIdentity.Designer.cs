// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MieleSystem.Infrastructure.Common.Persistence;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MieleSystem.Infrastructure.Migrations
{
    [DbContext(typeof(MieleDbContext))]
    [Migration("20250910190114_InitMieleIdentity")]
    partial class InitMieleIdentity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MieleSystem.Domain.Identity.Entities.OtpSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<int>("Purpose")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UsedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("OtpSessions", (string)null);
                });

            modelBuilder.Entity("MieleSystem.Domain.Identity.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("RevokedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("UserId", "CreatedAtUtc")
                        .HasDatabaseName("IX_RefreshTokens_UserId_CreatedAtUtc");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("MieleSystem.Domain.Identity.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateOnly?>("ExpiresAt")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<int>("RegistrationSituation")
                        .HasColumnType("integer");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("Role");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("MieleSystem.Domain.Identity.Entities.UserAuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("OccurredAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserPublicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("UserPublicId");

                    b.ToTable("UserAuditLogs", (string)null);
                });

            modelBuilder.Entity("MieleSystem.Domain.Identity.Entities.UserConnectionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("ConnectedAtUtc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeviceId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsSuccessful")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("OtpReason")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequiredOtp")
                        .HasColumnType("boolean");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedAtUtc")
                        .HasDatabaseName("IX_UserConnectionLogs_ConnectedAtUtc");

                    b.HasIndex("PublicId")
                        .IsUnique();

                    b.HasIndex("IpAddress", "ConnectedAtUtc")
                        .HasDatabaseName("IX_UserConnectionLogs_IpAddress_ConnectedAtUtc");

                    b.HasIndex("UserId", "ConnectedAtUtc")
                        .HasDatabaseName("IX_UserConnectionLogs_UserId_ConnectedAtUtc");

                    b.ToTable("UserConnectionLogs", (string)null);
                });

            modelBuilder.Entity("MieleSystem.Domain.Identity.Entities.OtpSession", b =>
                {
                    b.HasOne("MieleSystem.Domain.Identity.Entities.User", null)
                        .WithMany("OtpSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MieleSystem.Domain.Identity.ValueObjects.OtpCode", "Otp", b1 =>
                        {
                            b1.Property<int>("OtpSessionId")
                                .HasColumnType("integer");

                            b1.Property<string>("Code")
                                .IsRequired()
                                .HasMaxLength(6)
                                .HasColumnType("character varying(6)")
                                .HasColumnName("OtpCode");

                            b1.Property<DateTime>("ExpiresAt")
                                .HasColumnType("timestamp without time zone")
                                .HasColumnName("OtpExpiresAt");

                            b1.HasKey("OtpSessionId");

                            b1.ToTable("OtpSessions");

                            b1.WithOwner()
                                .HasForeignKey("OtpSessionId");
                        });

                    b.Navigation("Otp")
                        .IsRequired();
                });

            modelBuilder.Entity("MieleSystem.Domain.Identity.Entities.RefreshToken", b =>
                {
                    b.HasOne("MieleSystem.Domain.Identity.Entities.User", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("MieleSystem.Domain.Identity.ValueObjects.RefreshTokenHash", "TokenHash", b1 =>
                        {
                            b1.Property<int>("RefreshTokenId")
                                .HasColumnType("integer");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("TokenValue");

                            b1.HasKey("RefreshTokenId");

                            b1.ToTable("RefreshTokens");

                            b1.WithOwner()
                                .HasForeignKey("RefreshTokenId");
                        });

                    b.Navigation("TokenHash")
                        .IsRequired();
                });

            modelBuilder.Entity("MieleSystem.Domain.Identity.Entities.UserConnectionLog", b =>
                {
                    b.HasOne("MieleSystem.Domain.Identity.Entities.User", null)
                        .WithMany("ConnectionLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MieleSystem.Domain.Identity.Entities.User", b =>
                {
                    b.Navigation("ConnectionLogs");

                    b.Navigation("OtpSessions");

                    b.Navigation("RefreshTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
