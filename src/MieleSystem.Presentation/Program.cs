using DotNetEnv;
using Microsoft.Extensions.Options;
using MieleSystem.Presentation.Injection;
using MieleSystem.Presentation.Utils;

namespace MieleSystem.Presentation;

/// <summary>
/// Ponto de entrada principal da aplica√ß√£o MieleSystem.
/// Esta classe gerencia a inicializa√ß√£o da aplica√ß√£o, carregamento de configura√ß√µes e registro de servi√ßos.
/// </summary>
public class Program
{
    /// <summary>
    /// Ponto de entrada da aplica√ß√£o.
    /// </summary>
    /// <param name="args">Argumentos da linha de comando</param>
    /// <returns>C√≥digo de sa√≠da indicando sucesso ou falha</returns>
    public static async Task<int> Main(string[] args)
    {
        try
        {
            // Inicializa a aplica√ß√£o
            var app = await CreateApplicationAsync(args);

            // Configura e inicia a aplica√ß√£o
            await ConfigureAndStartApplicationAsync(app);

            return 0; // Sucesso
        }
        catch (Exception ex)
        {
            // Registra falha cr√≠tica na inicializa√ß√£o
            Console.WriteLine($"‚ùå Erro cr√≠tico durante a inicializa√ß√£o da aplica√ß√£o: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            return 1; // Falha
        }
    }

    /// <summary>
    /// Cria e configura a inst√¢ncia do WebApplication.
    /// </summary>
    /// <param name="args">Argumentos da linha de comando</param>
    /// <returns>Inst√¢ncia configurada do WebApplication</returns>
    private static async Task<WebApplication> CreateApplicationAsync(string[] args)
    {
        // Cria o construtor da aplica√ß√£o
        var builder = WebApplication.CreateBuilder(args);

        // Configura o sistema de logging
        ConfigureLogging(builder);

        // Carrega configura√ß√µes do ambiente
        await LoadEnvironmentConfigurationAsync(builder);

        // Registra servi√ßos da aplica√ß√£o
        RegisterApplicationServices(builder);

        // Constr√≥i a aplica√ß√£o
        var app = builder.Build();

        // Configura o pipeline da aplica√ß√£o
        ConfigureApplicationPipeline(app);

        return app;
    }

    /// <summary>
    /// Configura logging estruturado para a aplica√ß√£o.
    /// </summary>
    /// <param name="builder">Inst√¢ncia do WebApplicationBuilder</param>
    private static void ConfigureLogging(WebApplicationBuilder builder)
    {
        // Configura logging com configura√ß√µes espec√≠ficas do ambiente
        builder.Logging.ClearProviders();
        builder.Logging.AddConsole();
        builder.Logging.AddDebug();

        // Adiciona logging estruturado em produ√ß√£o
        if (builder.Environment.IsProduction())
        {
            // Em produ√ß√£o, voc√™ pode adicionar outros provedores como Serilog, Application Insights, etc.
            builder.Logging.AddEventSourceLogger();
        }
    }

    /// <summary>
    /// Carrega configura√ß√µes do ambiente a partir de arquivos .env e vari√°veis de ambiente.
    /// </summary>
    /// <param name="builder">Inst√¢ncia do WebApplicationBuilder</param>
    private static Task LoadEnvironmentConfigurationAsync(WebApplicationBuilder builder)
    {
        try
        {
            // Carrega arquivo .env se existir (ambiente de desenvolvimento)
            if (File.Exists(".env"))
            {
                Env.Load();
                Console.WriteLine("‚úÖ Vari√°veis de ambiente carregadas do arquivo .env");
            }
            else if (builder.Environment.IsDevelopment())
            {
                Console.WriteLine(
                    "‚ö†Ô∏è  Aviso: Arquivo .env n√£o encontrado no ambiente de desenvolvimento"
                );
            }

            // Adiciona vari√°veis de ambiente como fonte de configura√ß√£o
            // Isso √© CR√çTICO para o funcionamento correto da aplica√ß√£o
            builder.Configuration.AddEnvironmentVariables();

            Console.WriteLine("‚úÖ Vari√°veis de ambiente registradas como fonte de configura√ß√£o");

            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro ao carregar configura√ß√µes do ambiente: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// Registra todos os servi√ßos da aplica√ß√£o com inje√ß√£o de depend√™ncia.
    /// </summary>
    /// <param name="builder">Inst√¢ncia do WebApplicationBuilder</param>
    private static void RegisterApplicationServices(WebApplicationBuilder builder)
    {
        try
        {
            // Registra servi√ßos da API (inclui todas as camadas: Application, Infrastructure, Domain)
            builder.Services.AddAPI(builder.Configuration);

            Console.WriteLine("‚úÖ Servi√ßos da aplica√ß√£o registrados com sucesso");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro ao registrar servi√ßos da aplica√ß√£o: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// Configura o pipeline da aplica√ß√£o e middleware.
    /// </summary>
    /// <param name="app">Inst√¢ncia do WebApplication</param>
    private static void ConfigureApplicationPipeline(WebApplication app)
    {
        try
        {
            // Configura pipeline de middleware da API
            app.UseAPI();

            Console.WriteLine("‚úÖ Pipeline da aplica√ß√£o configurado com sucesso");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Erro ao configurar pipeline da aplica√ß√£o: {ex.Message}");
            throw;
        }
    }

    /// <summary>
    /// Configura e inicia a aplica√ß√£o com tratamento de erro adequado e logging.
    /// </summary>
    /// <param name="app">Inst√¢ncia do WebApplication</param>
    private static async Task ConfigureAndStartApplicationAsync(WebApplication app)
    {
        var logger = app.Services.GetRequiredService<ILogger<Program>>();

        try
        {
            // Registra informa√ß√µes de inicializa√ß√£o da aplica√ß√£o
            LogApplicationStartupInfo(logger, app.Environment);

            // Valida configura√ß√£o no ambiente de desenvolvimento
            if (app.Environment.IsDevelopment())
            {
                await ValidateConfigurationAsync(logger, app.Services);
            }

            // Registra inicializa√ß√£o bem-sucedida
            logger.LogInformation("üöÄ Aplica√ß√£o MieleSystem iniciada com sucesso");
            logger.LogInformation("üåç Ambiente: {Environment}", app.Environment.EnvironmentName);
            logger.LogInformation(
                "üîß Configura√ß√£o carregada de: {ConfigurationSources}",
                string.Join(", ", GetConfigurationSources(app.Environment))
            );

            // Inicia a aplica√ß√£o
            await app.RunAsync();
        }
        catch (OptionsValidationException ex)
        {
            logger.LogCritical(
                ex,
                "‚ùå Falha na valida√ß√£o da configura√ß√£o! Verifique seu appsettings.json ou arquivo .env. "
                    + "Erro: {ErrorMessage}",
                ex.Message
            );
            throw;
        }
        catch (Exception ex)
        {
            logger.LogCritical(
                ex,
                "‚ùå Erro cr√≠tico durante a inicializa√ß√£o da aplica√ß√£o: {ErrorMessage}",
                ex.Message
            );
            throw;
        }
    }

    /// <summary>
    /// Registra informa√ß√µes de inicializa√ß√£o da aplica√ß√£o.
    /// </summary>
    /// <param name="logger">Inst√¢ncia do logger</param>
    /// <param name="environment">Ambiente de hospedagem web</param>
    private static void LogApplicationStartupInfo(ILogger logger, IWebHostEnvironment environment)
    {
        logger.LogInformation("=".PadRight(60, '='));
        logger.LogInformation("üéØ Iniciando Aplica√ß√£o MieleSystem");
        logger.LogInformation("=".PadRight(60, '='));
        logger.LogInformation(
            "üìÖ Iniciado em: {StartTime}",
            DateTime.UtcNow.ToString("yyyy-MM-dd HH:mm:ss UTC")
        );
        logger.LogInformation("üåç Ambiente: {Environment}", environment.EnvironmentName);
        logger.LogInformation(
            "üìÅ Diret√≥rio de Conte√∫do: {ContentRoot}",
            environment.ContentRootPath
        );
        logger.LogInformation("üåê Diret√≥rio Web: {WebRoot}", environment.WebRootPath);
        logger.LogInformation("=".PadRight(60, '='));
    }

    /// <summary>
    /// Valida configura√ß√£o da aplica√ß√£o no ambiente de desenvolvimento.
    /// </summary>
    /// <param name="logger">Inst√¢ncia do logger</param>
    /// <param name="serviceProvider">Provedor de servi√ßos</param>
    private static Task ValidateConfigurationAsync(ILogger logger, IServiceProvider serviceProvider)
    {
        try
        {
            logger.LogInformation("üîç Validando configura√ß√£o da aplica√ß√£o...");

            // Usa o ConfigurationLogger para validar e registrar todas as configura√ß√µes
            ConfigurationLogger.LogConfigurationVariables(logger, serviceProvider);

            logger.LogInformation("‚úÖ Valida√ß√£o da configura√ß√£o conclu√≠da com sucesso");

            return Task.CompletedTask;
        }
        catch (Exception ex)
        {
            logger.LogError(ex, "‚ùå Falha na valida√ß√£o da configura√ß√£o: {ErrorMessage}", ex.Message);
            throw;
        }
    }

    /// <summary>
    /// Obt√©m a lista de fontes de configura√ß√£o baseadas no ambiente.
    /// </summary>
    /// <param name="environment">Ambiente de hospedagem web</param>
    /// <returns>Lista de fontes de configura√ß√£o</returns>
    private static string[] GetConfigurationSources(IWebHostEnvironment environment)
    {
        var sources = new List<string> { "appsettings.json" };

        if (environment.IsDevelopment())
        {
            sources.Add("appsettings.Development.json");
            sources.Add("arquivo .env");
        }
        else if (environment.IsStaging())
        {
            sources.Add("appsettings.Staging.json");
        }
        else if (environment.IsProduction())
        {
            sources.Add("appsettings.Production.json");
        }

        sources.Add("Vari√°veis de Ambiente");

        return sources.ToArray();
    }
}
