using DotNetEnv;
using Microsoft.Extensions.Options;
using MieleSystem.Presentation.Injection;
using MieleSystem.Presentation.Utils;

// ====================================================================================
// Ponto de Entrada (Entry Point) da Aplica√ß√£o MieleSystem
//
// Este arquivo √© respons√°vel pela inicializa√ß√£o, configura√ß√£o de servi√ßos,
// defini√ß√£o do pipeline de requisi√ß√µes HTTP e execu√ß√£o da aplica√ß√£o web.
// A estrutura utiliza "top-level statements" do C# 10 para uma configura√ß√£o
// mais limpa e linear, totalmente compat√≠vel com ferramentas de design-time
// como o Entity Framework Core.
// ====================================================================================


// ====================================================================================
// FASE 1: Configura√ß√£o do Application Builder
//
// Inicializa o construtor da aplica√ß√£o web (`WebApplicationBuilder`), que serve como
// o principal container para registrar servi√ßos, configura√ß√µes e logging.
// ====================================================================================

var builder = WebApplication.CreateBuilder(args);

// Configura os provedores e n√≠veis de logging para a aplica√ß√£o.
ConfigureLogging(builder);

// Carrega as vari√°veis de ambiente de arquivos .env e do sistema operacional.
LoadEnvironmentConfiguration(builder);

// Registra todos os servi√ßos da aplica√ß√£o no container de inje√ß√£o de depend√™ncia.
RegisterApplicationServices(builder);

// ====================================================================================
// FASE 2: Constru√ß√£o da Aplica√ß√£o
//
// Cria a inst√¢ncia da aplica√ß√£o (`WebApplication`) a partir da configura√ß√£o do builder.
// Neste ponto, o container de inje√ß√£o de depend√™ncia (IServiceProvider) √© finalizado
// e todos os servi√ßos registrados est√£o prontos para serem usados.
// ====================================================================================

var app = builder.Build();

// ====================================================================================
// FASE 3: Configura√ß√£o do Pipeline de Requisi√ß√µes HTTP
//
// Define a sequ√™ncia de middleware que ir√° processar cada requisi√ß√£o HTTP recebida.
// A ordem de registro dos middlewares √© crucial para o correto funcionamento da
// aplica√ß√£o (ex: autentica√ß√£o deve vir antes da autoriza√ß√£o).
// ====================================================================================

ConfigureApplicationPipeline(app);

// ====================================================================================
// FASE 4: Execu√ß√£o da Aplica√ß√£o
//
// Cont√©m a l√≥gica de inicializa√ß√£o final, como valida√ß√µes e logging de status,
// antes de efetivamente iniciar o servidor web para escutar por requisi√ß√µes.
// O bloco try-catch garante que qualquer falha cr√≠tica na inicializa√ß√£o seja
// registrada adequadamente.
// ====================================================================================

// Obt√©m uma inst√¢ncia do logger para registrar o processo de inicializa√ß√£o.
var logger = app.Services.GetRequiredService<ILogger<Program>>();

try
{
    // Registra informa√ß√µes detalhadas sobre a inicializa√ß√£o da aplica√ß√£o.
    LogApplicationStartupInfo(logger, app.Environment);

    // Executa valida√ß√µes de configura√ß√£o apenas em ambiente de desenvolvimento.
    if (app.Environment.IsDevelopment())
    {
        await ValidateConfigurationAsync(logger, app.Services);
    }

    logger.LogInformation("üöÄ Aplica√ß√£o MieleSystem pronta para receber requisi√ß√µes.");

    // Inicia a aplica√ß√£o, bloqueando a thread para escutar por requisi√ß√µes HTTP.
    await app.RunAsync();
}
catch (OptionsValidationException ex)
{
    // Captura erros espec√≠ficos de valida√ß√£o de configura√ß√µes (IOptions).
    logger.LogCritical(
        ex,
        "‚ùå Falha cr√≠tica na valida√ß√£o da configura√ß√£o. A aplica√ß√£o ser√° encerrada."
    );
    // Encerra a aplica√ß√£o com um c√≥digo de erro.
    Environment.ExitCode = 1;
}
catch (Exception ex)
{
    // Captura qualquer outra exce√ß√£o cr√≠tica durante a inicializa√ß√£o.
    logger.LogCritical(
        ex,
        "‚ùå Erro cr√≠tico n√£o tratado durante a inicializa√ß√£o. A aplica√ß√£o ser√° encerrada."
    );
    Environment.ExitCode = 1;
}

// ====================================================================================
// M√âTODOS AUXILIARES DE CONFIGURA√á√ÉO
//
// Fun√ß√µes est√°ticas que encapsulam a l√≥gica de configura√ß√£o para manter o
// fluxo principal do programa limpo e organizado.
// ====================================================================================

/// <summary>
/// Configura os provedores de logging para a aplica√ß√£o.
/// Limpa provedores padr√£o e adiciona Console, Debug e outros baseados no ambiente.
/// </summary>
/// <param name="builder">A inst√¢ncia do WebApplicationBuilder para configurar o logging.</param>
void ConfigureLogging(WebApplicationBuilder builder)
{
    builder.Logging.ClearProviders();
    builder.Logging.AddConsole();
    builder.Logging.AddDebug();

    if (builder.Environment.IsProduction())
    {
        builder.Logging.AddEventSourceLogger();
    }
}

/// <summary>
/// Carrega configura√ß√µes de ambiente a partir de um arquivo .env e das vari√°veis de ambiente do sistema.
/// </summary>
/// <param name="builder">A inst√¢ncia do WebApplicationBuilder para adicionar fontes de configura√ß√£o.</param>
void LoadEnvironmentConfiguration(WebApplicationBuilder builder)
{
    if (File.Exists(".env"))
    {
        Env.Load();
        Console.WriteLine("‚úÖ Vari√°veis de ambiente carregadas do arquivo .env");
    }
    builder.Configuration.AddEnvironmentVariables();
    Console.WriteLine("‚úÖ Vari√°veis de ambiente registradas como fonte de configura√ß√£o");
}

/// <summary>
/// Invoca os m√©todos de extens√£o para registrar todos os servi√ßos da aplica√ß√£o
/// (Application, Infrastructure, Domain) no container de DI.
/// </summary>
/// <param name="builder">A inst√¢ncia do WebApplicationBuilder para registrar servi√ßos.</param>
void RegisterApplicationServices(WebApplicationBuilder builder)
{
    // O m√©todo AddAPI encapsula o registro de todas as camadas da aplica√ß√£o.
    builder.Services.AddAPI(builder.Configuration);
    Console.WriteLine("‚úÖ Servi√ßos da aplica√ß√£o registrados com sucesso");
}

/// <summary>
/// Invoca os m√©todos de extens√£o para configurar o pipeline de middleware da API.
/// </summary>
/// <param name="app">A inst√¢ncia da aplica√ß√£o WebApplication.</param>
void ConfigureApplicationPipeline(WebApplication app)
{
    // O m√©todo UseAPI encapsula a configura√ß√£o de todos os middlewares (Swagger, Auth, etc.).
    app.UseAPI();
    Console.WriteLine("‚úÖ Pipeline da aplica√ß√£o configurado com sucesso");
}

/// <summary>
/// Registra no log informa√ß√µes detalhadas sobre o ambiente de inicializa√ß√£o da aplica√ß√£o.
/// </summary>
/// <param name="logger">A inst√¢ncia do logger a ser utilizada.</param>
/// <param name="environment">Informa√ß√µes sobre o ambiente de hospedagem.</param>
void LogApplicationStartupInfo(ILogger logger, IWebHostEnvironment environment)
{
    logger.LogInformation("=".PadRight(60, '='));
    logger.LogInformation("üéØ Iniciando Aplica√ß√£o MieleSystem");
    logger.LogInformation("   - Ambiente: {Environment}", environment.EnvironmentName);
    logger.LogInformation("   - Diret√≥rio Raiz: {ContentRoot}", environment.ContentRootPath);
    logger.LogInformation("=".PadRight(60, '='));
}

/// <summary>
/// Valida e registra no log as configura√ß√µes da aplica√ß√£o para depura√ß√£o em ambiente de desenvolvimento.
/// </summary>
/// <param name="logger">A inst√¢ncia do logger a ser utilizada.</param>
/// <param name="serviceProvider">O provedor de servi√ßos para resolver as configura√ß√µes.</param>
async Task ValidateConfigurationAsync(ILogger logger, IServiceProvider serviceProvider)
{
    logger.LogInformation("üîç Validando configura√ß√£o da aplica√ß√£o...");
    ConfigurationLogger.LogConfigurationVariables(logger, serviceProvider);
    logger.LogInformation("‚úÖ Valida√ß√£o da configura√ß√£o conclu√≠da com sucesso");
    await Task.CompletedTask;
}

/// <summary>
/// Declara√ß√£o da classe parcial 'Program'.
/// Necess√°ria para que as ferramentas de design-time do .NET (como o Entity Framework)
/// possam identificar este arquivo como o ponto de entrada da aplica√ß√£o ao usar top-level statements.
/// </summary>
public partial class Program { }
